"use client";

import { useState, useEffect } from "react";
import { useParams, useRouter } from "next/navigation";
import Link from "next/link";
import { ArrowLeft, Save } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import type { BaseProduct } from "@/types/product";

export default function EditBaseProductPage() {
  const params = useParams();
  const router = useRouter();
  const baseProductId = params.id as string;

  const [baseProducts, setBaseProducts] = useState<BaseProduct[]>([]);
  const [formData, setFormData] = useState({
    name: "",
    category: "",
    imageUrl: "", // New field for image URL
  });

  const categories = [
    {
      value: "·ÄÜ·Äî·Ä∫·Äî·Äæ·ÄÑ·Ä∑·Ä∫ ·ÄÄ·Ä±·Ä¨·ÄÄ·Ä∫·Äï·Ä≤·Äû·ÄÆ·Ä∏·Äî·Äæ·Ä∂·Äô·Äª·Ä¨·Ä∏",
      icon: "üåæ",
      color: "from-amber-400 to-yellow-500",
    },
    {
      value: "·Äü·ÄÑ·Ä∫·Ä∏·Äû·ÄÆ·Ä∏·Äü·ÄÑ·Ä∫·Ä∏·Äõ·ÄΩ·ÄÄ·Ä∫·Äô·Äª·Ä¨·Ä∏",
      icon: "ü•¨",
      color: "from-green-400 to-emerald-500",
    },
    { value: "·Äû·ÄÖ·Ä∫·Äû·ÄÆ·Ä∏·Äô·Äª·Ä¨·Ä∏", icon: "üçé", color: "from-red-400 to-pink-500" },
    {
      value: "·Ä°·Äû·Ä¨·Ä∏·Äî·Äæ·ÄÑ·Ä∑·Ä∫ ·ÄÑ·Ä´·Ä∏·Äô·Äª·Ä¨·Ä∏",
      icon: "üêü",
      color: "from-blue-400 to-cyan-500",
    },
    { value: "·ÄÅ·Äª·ÄÄ·Ä∫·Äï·Äº·ÄØ·Äê·Ä∫·ÄÜ·ÄÆ", icon: "ü´ó", color: "from-yellow-400 to-orange-500" },
    {
      value: "·Ä°·ÄÅ·Äª·Ä≠·ÄØ·Äõ·Ää·Ä∫·Äî·Äæ·ÄÑ·Ä∑·Ä∫ ·Äñ·Äª·Ä±·Ä¨·Ä∫·Äõ·Ää·Ä∫·Äô·Äª·Ä¨·Ä∏",
      icon: "ü•§",
      color: "from-blue-300 to-cyan-400",
    },
    {
      value: "·Äô·ÄØ·Äî·Ä∑·Ä∫·Äî·Äæ·ÄÑ·Ä∑·Ä∫ ·Äû·Äõ·Ä±·ÄÖ·Ä¨·Äô·Äª·Ä¨·Ä∏",
      icon: "üç™",
      color: "from-pink-300 to-rose-400",
    },
    {
      value: "·Äî·Ä≠·ÄØ·Ä∑·Äë·ÄΩ·ÄÄ·Ä∫·Äï·ÄÖ·Äπ·ÄÖ·Ää·Ä∫·Ä∏·Äî·Äæ·ÄÑ·Ä∑·Ä∫ ·ÄÄ·Äº·ÄÄ·Ä∫·Ä•·Äô·Äª·Ä¨·Ä∏",
      icon: "ü•õ",
      color: "from-stone-300 to-yellow-300",
    },
    {
      value: "·Ä°·Ä±·Ä∏·ÄÅ·Ä≤·Ä°·ÄÖ·Ä¨·Ä∏·Ä°·ÄÖ·Ä¨·Äô·Äª·Ä¨·Ä∏",
      icon: "üßä",
      color: "from-sky-300 to-indigo-400",
    },
    {
      value: "·ÄÄ·Ä≠·ÄØ·Äö·Ä∫·Äï·Ä≠·ÄØ·ÄÑ·Ä∫·ÄÖ·Ä±·Ä¨·ÄÑ·Ä∑·Ä∫·Äõ·Äæ·Ä±·Ä¨·ÄÄ·Ä∫·Äô·Äæ·ÄØ",
      icon: "üß¥",
      color: "from-teal-300 to-emerald-400",
    },
    {
      value: "·ÄÄ·Äú·Ä±·Ä∏·Äï·ÄÖ·Äπ·ÄÖ·Ää·Ä∫·Ä∏·Äô·Äª·Ä¨·Ä∏",
      icon: "üë∂",
      color: "from-purple-200 to-pink-300",
    },
    {
      value: "·Ä°·Ä≠·Äô·Ä∫·Äû·ÄØ·Ä∂·Ä∏·Äï·ÄÖ·Äπ·ÄÖ·Ää·Ä∫·Ä∏·Äô·Äª·Ä¨·Ä∏",
      icon: "üè†",
      color: "from-purple-400 to-violet-500",
    },
    { value: "·Äú·Ä±·Ä¨·ÄÑ·Ä∫·ÄÖ·Ä¨·ÄÜ·ÄÆ", icon: "‚õΩ", color: "from-gray-400 to-slate-500" },
    { value: "·Ä°·ÄÅ·Äº·Ä¨·Ä∏·Äô·Äª·Ä¨·Ä∏", icon: "üì¶", color: "from-indigo-400 to-blue-500" },
  ];

  useEffect(() => {
    const savedBaseProducts = localStorage.getItem("baseProducts");
    if (savedBaseProducts) {
      const parsedBaseProducts: BaseProduct[] = JSON.parse(savedBaseProducts);
      setBaseProducts(parsedBaseProducts);

      const baseProduct = parsedBaseProducts.find(
        (p) => p.id === baseProductId
      );
      if (baseProduct) {
        // Check if there's an imageUrl in localStorage
        const productImages = localStorage.getItem("productImages");
        let imageUrl = "";
        if (productImages) {
          const parsedImages = JSON.parse(productImages);
          if (parsedImages[baseProductId]) {
            imageUrl = parsedImages[baseProductId];
          }
        }

        setFormData({
          name: baseProduct.name,
          category: baseProduct.category,
          imageUrl: imageUrl,
        });
      } else {
        router.push("/admin/products");
      }
    }
  }, [baseProductId, router]);

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();

    if (!formData.name || !formData.category) {
      alert("·ÄÄ·Äª·Ä±·Ä∏·Äá·Ä∞·Ä∏·Äï·Äº·ÄØ·Åç ·Ä°·Ä¨·Ä∏·Äú·ÄØ·Ä∂·Ä∏·ÄÄ·Ä≠·ÄØ ·Äñ·Äº·Ää·Ä∑·Ä∫·Äï·Ä´");
      return;
    }

    const updatedBaseProducts = baseProducts.map((p) => {
      if (p.id === baseProductId) {
        return {
          ...p,
          name: formData.name.trim(),
          category: formData.category,
        };
      }
      return p;
    });

    // Save the updated base products
    localStorage.setItem("baseProducts", JSON.stringify(updatedBaseProducts));

    // Save the image URL if provided
    if (formData.imageUrl) {
      const productImages = localStorage.getItem("productImages") || "{}";
      const parsedImages = JSON.parse(productImages);
      parsedImages[baseProductId] = formData.imageUrl.trim();
      localStorage.setItem("productImages", JSON.stringify(parsedImages));
    }

    router.push("/admin/products");
  };

  return (
    <div className="min-h-screen">
      {/* Header */}
      <header className="bg-gradient-to-r from-blue-500 to-purple-500 text-white">
        <div className="container mx-auto px-3 py-4 sm:px-4 sm:py-6">
          <div className="flex items-center gap-3 sm:gap-4">
            <Link href="/admin/products">
              <Button
                variant="ghost"
                size="sm"
                className="text-white hover:bg-white/20 p-2"
              >
                <ArrowLeft className="h-4 w-4" />
              </Button>
            </Link>
            <h1 className="text-lg sm:text-xl font-bold">
              ·ÄÄ·ÄØ·Äî·Ä∫·Äï·ÄÖ·Äπ·ÄÖ·Ää·Ä∫·Ä∏ ·Äï·Äº·ÄÑ·Ä∫·ÄÜ·ÄÑ·Ä∫·Äõ·Äî·Ä∫
            </h1>
          </div>
        </div>
      </header>

      <main className="container mx-auto px-3 py-4 sm:px-4 sm:py-6 max-w-md">
        <Card className="border-2 border-gray-100 shadow-lg">
          <CardHeader>
            <CardTitle className="text-center text-xl">
              ·ÄÄ·ÄØ·Äî·Ä∫·Äï·ÄÖ·Äπ·ÄÖ·Ää·Ä∫·Ä∏ ·Ä°·ÄÅ·Äª·ÄÄ·Ä∫·Ä°·Äú·ÄÄ·Ä∫·Äô·Äª·Ä¨·Ä∏ ·Äï·Äº·ÄÑ·Ä∫·ÄÜ·ÄÑ·Ä∫·Äõ·Äî·Ä∫
            </CardTitle>
          </CardHeader>
          <CardContent>
            <form onSubmit={handleSubmit} className="space-y-4">
              <div className="space-y-2">
                <Label htmlFor="name">·ÄÄ·ÄØ·Äî·Ä∫·Äï·ÄÖ·Äπ·ÄÖ·Ää·Ä∫·Ä∏ ·Ä°·Äô·Ää·Ä∫</Label>
                <Input
                  id="name"
                  placeholder="·Ä•·Äï·Äô·Ä¨ - ·ÄÜ·Äî·Ä∫·Åä ·ÄÜ·ÄÆ·Åä ·ÄÜ·Ä¨·Ä∏"
                  value={formData.name}
                  onChange={(e) =>
                    setFormData({ ...formData, name: e.target.value })
                  }
                  className="border-2 focus:ring-2 focus:ring-primary-100"
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="category">·Ä°·Äô·Äª·Ä≠·ÄØ·Ä∏·Ä°·ÄÖ·Ä¨·Ä∏</Label>
                <Select
                  value={formData.category}
                  onValueChange={(value) =>
                    setFormData({ ...formData, category: value })
                  }
                >
                  <SelectTrigger className="border-2 focus:ring-2 focus:ring-primary-100">
                    <SelectValue placeholder="·Ä°·Äô·Äª·Ä≠·ÄØ·Ä∏·Ä°·ÄÖ·Ä¨·Ä∏ ·Äõ·ÄΩ·Ä±·Ä∏·Äï·Ä´" />
                  </SelectTrigger>
                  <SelectContent>
                    {categories.map((category) => (
                      <SelectItem key={category.value} value={category.value}>
                        <div className="flex items-center gap-2">
                          <span>{category.icon}</span>
                          <span>{category.value}</span>
                        </div>
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>

              <div className="space-y-2">
                <Label htmlFor="imageUrl">·Äï·ÄØ·Ä∂ URL (·Äõ·Äæ·Ä≠·Äú·Äª·Äæ·ÄÑ·Ä∫)</Label>
                <Input
                  id="imageUrl"
                  placeholder="https://example.com/image.jpg"
                  value={formData.imageUrl}
                  onChange={(e) =>
                    setFormData({ ...formData, imageUrl: e.target.value })
                  }
                  className="border-2 focus:ring-2 focus:ring-primary-100"
                />
              </div>

              <Button
                type="submit"
                className="w-full bg-gradient-to-r from-blue-500 to-purple-500 hover:from-blue-600 hover:to-purple-600"
              >
                <Save className="h-4 w-4 mr-2" />
                ·Äû·Ä≠·Äô·Ä∫·Ä∏·ÄÜ·Ää·Ä∫·Ä∏·Äô·Ää·Ä∫
              </Button>
            </form>
          </CardContent>
        </Card>
      </main>
    </div>
  );
}
